mat[1][1]
mat[2][1]
mat[1][2]
summary(mat)
summary(e)
summary(1:100)
summary(0:100)
0:5:7
true
True
T
t
T
mode(T)
T & T
T & F
ls
ls()
&
rm(ls())
summary(ls())
factor(1:100)
factor(c('asdf','asd','as','a'))
factor(c('p','a','u','l'))
state <- c("tas", "sa", "qld", "nsw", "nsw", "nt", "wa", "wa", #
"qld", "vic", "nsw", "vic", "qld", "qld", "sa", "tas", #
"sa", "nt", "wa", "vic", "qld", "nsw", "nsw", "wa", #
"sa", "act", "nsw", "vic", "vic", "act")
state
statef <- factor(state)
statef
mean(1:3)
q1(1:100)
incomes <- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, #
61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, #
59, 46, 58, 43)
incmeans <- tapply(incomes, statef, mean)
incmeans
tapply(incomes, sin)
?tapply
tapply(incomes, statef, summary)
tapply(incomes, state, mean)
tapply(incomes, state, sd)
e
e <- 1:42
e
dim(e) <- c(2,3,7)
e
dim(e) <- c(7,3,2)
e
c(1:3,3:21)
c(1:3,3:1)
1:20[-13]
()1:20)[-13]
(1:20)[-13]
1[1]
1[2]
2[1]
1:(1:4)
e
e[-1,-1,-1]
e[-1,-1,-1][-2,-2]
e[-1,-1,-1][-4]
e[-1,-1,-1][,-4]
e[-1,-1,-1][,-1]
89
x <- 1:100
plot(x^2 - x^3, x)
plot(x, x^2 - x^3)
plot(x, sin(cos(x)))
x <- seq(-1, 1, by=0.05)
plot(x, sin(cos(x)))
x <- seq(-pi, pi, by=0.05)
plot(x, sin(cos(x)))
plot(x, tan(tan(x))
)
?cbind
cbind(1:10, 1:10, 20:30)
cbind(0:5, 0:2, 20:30)
cbind(0:5, 0:2, 20:31)
cbind(0:4, 0:1, 20:30)
cbind(0:4, 0:1, 20:29)
array(1:100, c(2,3,4))
1:5 %o% 1:5
outer(1:5, 1:5 "+")
outer(1:5, 1:5, "+")
outer(1:5, 1:5, "^")
a <- 1:10
dim(a) <- c(2,5)
a
outer(a, 1:4)
f <- function(x) sqrt(abs(x)) + 5.0*x^3
f(2)
f(0:15)
d <- outer(0:9, 0:9)
fr <- table(outer(d, d, "-"))
plot(as.numeric(names(fr)), fr, type="h", #
xlab="Determinant", ylab="Frequency")
fr
table(0:99)
table(0:9 %o% 0:9)
table(0:15 %o% 0:15)
plot(table(0:15 %o% 0:15))
plot(table(1:18 %o% 1:18))
table(1:18 %o% 1:18)
1:6 %*% 1:6
cbind(1:6)
cbind(1:6) %*% 1:6
crossprod(1:6)
diag(1:6)
diag(1:6 %o% 1:6)
A <- 1:6 %o% 1:6
x <- 6:1
A %*% x
b <- A %*% x
solbe(A,b)
solve(A,b)
solve(A)
solve(1:6 %*% 6:1)
1:6 %*% 6:1
1:6 %o% 6:1
solve(1:6 %o% 6:1)
eigen(1:6 %o% 6:1)
eigen(1:2 %o% 2:1)
eigen(1:3 %o% 3:1)
eigen(1:3 %o% 3:1)$vectors
solve(eigen(1:3 %o% 3:1)$vectors)
solve(eigen(1:3 %o% 3:1)$vectors + 0.5)
table(statef)
table(statef, statef)
factor(cut(incomes, breaks= 35+10*(0:7)))
table(factor(cut(incomes, breaks= 35+10*(0:7))), statef)
?cut
search()
data()
data(Seatbelts)
Seatbelts
data(Titanic)
Titanic
plot(Titanic)
plot(Titanic[Sex=Male])
plot(Titanic[Sex='Male'])
Titanic[4]
Titanic[3]
Titanic[1,,,]
Titanic[2,,,]
Titanic[,1,,]
Titanic[,2,,]
Titanic[,,1,]
Titanic[,,2,]
Titanic[,,2,1]
Titanic[,1,2,]
plot(Titanic[,1,2,])
exp(0)
exp(5)
exp(2)
exp(0.5)
plot(exp)
exp(e)
fivenum(0:9)
source("http://www.ggobi.org/downloads/install.r")
install.packages(pcurve)
install.packages('pcurve')
require(e1071)#
require(SparseM)#
key.users <- data.frame(as.matrix(read.matrix.csr("ex.key_users")$x))#
#
require(pcurve)
require(e1071)#
require(SparseM)#
key.users <- data.frame(as.matrix(read.matrix.csr("ex.key_users")$x))#
#
require(pcurve)
#pcr <- pcurve(key.users[
key.users[1:10,1:10]
key.users[1:10,]
#pcr <- pcurve(key.users[1:5,], start='ran', metric='mountford')
pcr <- pcurve(key.users[1:5,], start='ran', metric='mountford')
plot(pcr$s)
pcr$s
pcr <- pcurve(key.users[1:5,], start='pca', metric='mountford')
plot(pcr$s)
pcr <- pcurve(key.users[1:10,], start='pca', metric='mountford')
plot(pcr$s)
pcr <- pcurve(key.users[1:20,], start='pca', metric='mountford')
plot(pcr$s)
pcr <- pcurve(key.users[1:20,], start='ran', metric='mountford')
plot(pcr$s)
pcr <- pcurve(key.users[1:50,], start='ran', metric='mountford')
plot(pcr$s)
pcr$s
plot(pcr$s[1:2*2])
plot(pcr$s[1:3*2])
plot(pcr$s[1:4*2])
plot(pcr$s[,1:2*2])
plot(pcr$s[,1:3*2])
plot(pcr$s[,1:6*2])
plot(pcr$s[,1:2*3])
plot(pcr$s[,1:2*4])
plot(pcr$s[,1:2*5])
plot(pcr$s[,1:2*4])
?pcurve
summary(pcr)
pcr$df
ocr$tag
pcr$tag
?write
source("/Users/paul/src/yeahbut/backend/trunk/offline.R")
source("/Users/paul/src/yeahbut/backend/trunk/offline.R")
dim(accum)[2]
source("/Users/paul/src/yeahbut/backend/trunk/offline.R")
write(accum, file="pcaed_users", ncolumns=dim(accum)[2])
write(clusters$cluster, file="cluster_assignments", ncolumns=dim(clusters$cluster)[2])
dim(clusters$cluster)[2]
dim(clusters$cluster)
clusters$cluster
write(clusters$cluster, file="cluster_assignments", ncolumns=dim(clusters$cluster)[2])
source("/Users/paul/src/yeahbut/backend/trunk/offline.R")
community.connections
community.connections[1]
community.connections[1,]
community.connections[2]
community.connections[3]
attributes(community.connections)
length(community.connections)
community.connections[6]
community.connections[5]
community.connections[3]
community.connections[2]
community.connections[4]
community.connections[9]
community.connections[8]
community.connections[7]
community.connections[6]
community.connections
as.matrix(community.connections)
community.connections[3:8]
community.connections[3:4]
as.matrix(community.connections[3:4])
t(community.connections[3:4])
as.matrix(community.connections[3])
matrix(community.connections[3])
write(community.connections[3:4],"cc")
community.connections[3][1]
community.connections[3][1][1]
?list
vector(community.connections[3])
unpack(community.connections[3])
unlist(community.connections[3])
write(cbind(unlist(community.connections[3]), unlist(community.connections[4])), file="cluster_connections", ncolumns=2)
community.connections
community.connections[3]
community.connections[4]
unlist(community.connections[3])
unlist(community.connections[4])
?matrix
cbind(unlist(community.connections[3]), unlist(community.connections[4])
cbind(unlist(community.connections[3]), unlist(community.connections[4]))
cbind(unlist(community.connections[3]), unlist(community.connections[4]))
write(cbind(unlist(community.connections[3]), unlist(community.connections[4])), file='cluster_connections', ncolumns=2)
clusters$centers
write(t(accum), file="pcaed_users", ncolumns=dim(accum)[2])#
write(t(clusters$cluster), file="cluster_assignments", ncolumns=1)#
write(t(clusters$centers), file="cluster_centers", ncolumns=dim(clusters$centers)[2])
write(t(cbind(unlist(community.connections[3]), unlist(community.connections[4]))), file="cluster_connections", ncolumns=2)
?vegdist
